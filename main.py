import asyncio
import logging
import os
import re
import sqlite3
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

logging.basicConfig(level=logging.INFO)

API_TOKEN = '7997011708:AAEklALPWefzYXtub9ReyWQq0ms7P-rVhF8'

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)



class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_group = State()
    waiting_for_email = State()


class EditProfileStates(StatesGroup):
    waiting_for_new_name = State()
    waiting_for_new_group = State()
    waiting_for_new_email = State()


class MailingTimeStates(StatesGroup):
    waiting_for_time = State()


def create_database():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            last_name TEXT,
            first_name TEXT,
            group_number TEXT,
            email TEXT,
            mailing_enabled BOOLEAN DEFAULT FALSE,
            mailing_time TEXT DEFAULT '07:00'
        )
    ''')
    conn.commit()
    conn.close()


def is_user_registered(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user is not None


def get_user_data(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user


def get_group_users(group_number):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT last_name, first_name, user_id, email FROM users WHERE group_number = ?', (group_number,))
    users = cursor.fetchall()
    conn.close()
    users_sorted = sorted(users, key=lambda x: x[0].lower())
    return users_sorted


def register_user(user_id, last_name, first_name, group_number, email):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, last_name, first_name, group_number, email, mailing_enabled, mailing_time)
        VALUES (?, ?, ?, ?, ?, FALSE, '07:00')
    ''', (user_id, last_name, first_name, group_number, email))
    conn.commit()
    conn.close()


def update_user_data(user_id, last_name, first_name, group_number, email):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE users 
        SET last_name = ?, first_name = ?, group_number = ?, email = ?
        WHERE user_id = ?
    ''', (last_name, first_name, group_number, email, user_id))
    conn.commit()
    conn.close()


def enable_mailing(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET mailing_enabled = TRUE WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()


def disable_mailing(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET mailing_enabled = FALSE WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()


def update_mailing_time(user_id, mailing_time):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET mailing_time = ? WHERE user_id = ?', (mailing_time, user_id))
    conn.commit()
    conn.close()


def get_mailing_users():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, mailing_time, group_number FROM users WHERE mailing_enabled = TRUE')
    users = cursor.fetchall()
    conn.close()
    return users


def read_text_file(file_path):
    try:
        if not os.path.exists(file_path):
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read().strip()
            return content if content else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
    except Exception:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"


def read_schedule_file(group_number, week_type, day_en):
    try:
        if "3" in group_number:
            group_folder = "group 3"
        elif "4" in group_number:
            group_folder = "group 4"
        else:
            group_folder = "group 3"
        file_path = os.path.join('storage/schedule/module 1', group_folder, week_type, f"{day_en}.txt")
        if not os.path.exists(file_path):
            return None
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read().strip()
            return content if content else None
    except Exception:
        return None


def get_current_week():
    week_number = datetime.now().isocalendar()[1]
    return "lower" if week_number % 2 == 1 else "upper"


def is_valid_time(time_str):
    pattern = r'^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$'
    return re.match(pattern, time_str) is not None


def get_profile_text(user_data):
    profile_template = read_text_file('storage/data/profile.txt')
    return profile_template.format(
        last_name=user_data[1],
        first_name=user_data[2],
        group=user_data[3],
        email=user_data[4]
    )


def get_mailing_status_text(user_data):
    mailing_enabled = user_data[5] if len(user_data) > 5 else False
    mailing_time = user_data[6] if len(user_data) > 6 else "07:00"
    mailing_status = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if mailing_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞"
    status_text = f"üìß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {mailing_status}\n–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {mailing_time}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    return status_text


def read_curators_file(group_number):
    try:
        if group_number == "3":
            filename = "group 3.txt"
        elif group_number == "4":
            filename = "group 4.txt"
        else:
            return None
        file_path = os.path.join('storage', 'contacts', 'curators', filename)
        return read_text_file(file_path)
    except Exception:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä–∞—Ç–æ—Ä–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"


def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
            [KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton(text="–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_profile_inline_keyboard(user_data):
    if user_data[3] == "–ì–æ—Å—Ç—å":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è", callback_data="edit_name")],
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="edit_group")]
            ]
        )
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è", callback_data="edit_name")],
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="edit_group")],
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="edit_email")]
            ]
        )
    return keyboard


def get_schedule_inline_keyboard(user_data):
    if user_data[3] == "–ì–æ—Å—Ç—å":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="schedule_today")],
                [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="schedule_week")]
            ]
        )
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="schedule_today")],
                [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="schedule_week")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="mailing_settings")]
            ]
        )
    return keyboard


def get_group_selection_keyboard(schedule_type):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë• 3 –≥—Ä—É–ø–ø–∞", callback_data=f"guest_{schedule_type}_3")],
            [InlineKeyboardButton(text="üë• 4 –≥—Ä—É–ø–ø–∞", callback_data=f"guest_{schedule_type}_4")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_schedule")]
        ]
    )
    return keyboard


def get_week_selection_keyboard(schedule_type, group_number=None):
    callback_prefix = f"guest_{schedule_type}_{group_number}" if group_number else schedule_type
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üî∫ –í–µ—Ä—Ö–Ω—è—è –Ω–µ–¥–µ–ª—è", callback_data=f"{callback_prefix}_upper")],
            [InlineKeyboardButton(text="üîª –ù–∏–∂–Ω—è—è –Ω–µ–¥–µ–ª—è", callback_data=f"{callback_prefix}_lower")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_schedule")]
        ]
    )
    return keyboard


def get_contacts_inline_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë• –û–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–∏", callback_data="groupmates")],
            [InlineKeyboardButton(text="üë®‚Äçüè´üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", callback_data="teachers")],
            [InlineKeyboardButton(text="üåü –ö—É—Ä–∞—Ç–æ—Ä—ã", callback_data="curators")]
        ]
    )
    return keyboard


def get_groupmates_inline_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="3 –≥—Ä—É–ø–ø–∞", callback_data="group_3")],
            [InlineKeyboardButton(text="4 –≥—Ä—É–ø–ø–∞", callback_data="group_4")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_contacts")]
        ]
    )
    return keyboard


def get_teachers_inline_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ì–æ—Ä–æ–¥–Ω–æ–≤–∞ –ê.–ê.", callback_data="gorodnova")],
            [InlineKeyboardButton(text="–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∞ –¢.–ù.", callback_data="konstantinova")],
            [InlineKeyboardButton(text="–ö–æ—á–µ—Ä–æ–≤ –°.–ù.", callback_data="kocherov")],
            [InlineKeyboardButton(text="–ú–∞—Ä—å–µ–≤–∏—á–µ–≤ –ù.", callback_data="marevichev")],
            [InlineKeyboardButton(text="–ü–µ–ø–ª–∏–Ω –§.–°.", callback_data="peplin")],
            [InlineKeyboardButton(text="–ü–æ–ª–æ–Ω–µ—Ü–∫–∞—è –ù.–ê.", callback_data="poloneckaya")],
            [InlineKeyboardButton(text="–°–∞–≤–∏–Ω–∞ –û.–ù.", callback_data="savina")],
            [InlineKeyboardButton(text="–¢–∞–ª–µ—Ü–∫–∏–π –î.–°.", callback_data="taleckiy")],
            [InlineKeyboardButton(text="–£–ª–∏—Ç–∏–Ω –ë.–ò.", callback_data="ulitin")],
            [InlineKeyboardButton(text="–ß–∏—Å—Ç—è–∫–æ–≤–∞ –°.–ê.", callback_data="chistyakova")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_contacts")]
        ]
    )
    return keyboard


def get_curators_groups_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="3 –≥—Ä—É–ø–ø–∞", callback_data="curators_group_3")],
            [InlineKeyboardButton(text="4 –≥—Ä—É–ø–ø–∞", callback_data="curators_group_4")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_contacts")]
        ]
    )
    return keyboard


def get_mailing_settings_keyboard(user_data):
    mailing_enabled = user_data[5] if len(user_data) > 5 else False
    if mailing_enabled:
        mailing_buttons = [[
            InlineKeyboardButton(text="‚úÖ –í–ö–õ", callback_data="disable_mailing"),
            InlineKeyboardButton(text="‚ùå –í–´–ö–õ", callback_data="disable_mailing")
        ]]
    else:
        mailing_buttons = [[
            InlineKeyboardButton(text="‚úÖ –í–ö–õ", callback_data="enable_mailing"),
            InlineKeyboardButton(text="‚ùå –í–´–ö–õ", callback_data="enable_mailing")
        ]]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            *mailing_buttons,
            [InlineKeyboardButton(text="üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="change_mailing_time")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="back_to_schedule")]
        ]
    )
    return keyboard


def get_subjects_inline_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", callback_data="english")],
            [InlineKeyboardButton(text="–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data="safe")],
            [InlineKeyboardButton(text="–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data="discrete")],
            [InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏", callback_data="history")],
            [InlineKeyboardButton(text="–õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞ –∏ –≥–µ–æ–º–µ—Ç—Ä–∏—è", callback_data="linear")],
            [InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", callback_data="calculus")],
            [InlineKeyboardButton(text='–ù–ü–° "–¶–∏—Ñ—Ä–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å"', callback_data="digital")],
            [InlineKeyboardButton(text="–û—Å–Ω–æ–≤—ã —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", callback_data="statehood")],
            [InlineKeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ C/C++", callback_data="cpp")],
            [InlineKeyboardButton(text="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="software")],
            [InlineKeyboardButton(text="–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞", callback_data="pe")]
        ]
    )
    return keyboard


def get_addresses_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìç –ë–æ–ª—å—à–∞—è –ü–µ—á–µ—Ä—Å–∫–∞—è —É–ª., 25/12", callback_data="address_1")],
            [InlineKeyboardButton(text="üìç –ö–æ—Å—Ç–∏–Ω–∞ —É–ª., 2–ë", callback_data="address_2")],
            [InlineKeyboardButton(text="üìç –õ—å–≤–æ–≤—Å–∫–∞—è —É–ª., 1–≤", callback_data="address_3")],
            [InlineKeyboardButton(text="üìç –†–æ–¥–∏–æ–Ω–æ–≤–∞ —É–ª., 136", callback_data="address_4")],
            [InlineKeyboardButton(text="üìç –°–æ—Ä–º–æ–≤—Å–∫–æ–µ —à., 30", callback_data="address_5")]
        ]
    )
    return keyboard


def get_group_selection_registration_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="3 –≥—Ä—É–ø–ø–∞", callback_data="group_3_reg")],
            [InlineKeyboardButton(text="4 –≥—Ä—É–ø–ø–∞", callback_data="group_4_reg")],
            [InlineKeyboardButton(text="–ì–æ—Å—Ç—å", callback_data="group_guest_reg")]
        ]
    )
    return keyboard


def get_subject_teacher_keyboard(subject):
    teacher_keyboards = {
        "safe": InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ì–æ—Ä–æ–¥–Ω–æ–≤–∞ –ê.–ê.", callback_data="gorodnova")]]
        ),
        "discrete": InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–¢–∞–ª–µ—Ü–∫–∏–π –î.–°.", callback_data="taleckiy")]]
        ),
        "history": InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∞ –¢.–ù.", callback_data="konstantinova")]]
        ),
        "linear": InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–°–∞–≤–∏–Ω–∞ –û.–ù.", callback_data="savina")]]
        ),
        "calculus": InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ß–∏—Å—Ç—è–∫–æ–≤–∞ –°.–ê.", callback_data="chistyakova")]]
        ),
        "digital": InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–ª–æ–Ω–µ—Ü–∫–∞—è –ù.–ê.", callback_data="poloneckaya")]]
        ),
        "statehood": InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∞ –¢.–ù.", callback_data="konstantinova")],
                [InlineKeyboardButton(text="–ö–æ—á–µ—Ä–æ–≤ –°.–ù.", callback_data="kocherov")]
            ]
        ),
        "cpp": InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ú–∞—Ä—å–µ–≤–∏—á–µ–≤ –ù.", callback_data="marevichev")],
                [InlineKeyboardButton(text="–ü–µ–ø–ª–∏–Ω –§.–°.", callback_data="peplin")]
            ]
        ),
        "software": InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–£–ª–∏—Ç–∏–Ω –ë.–ò.", callback_data="ulitin")]]
        )
    }
    return teacher_keyboards.get(subject)


async def send_schedule(callback, group_display, group_number, week_type, schedule_type):
    try:
        week_display = "–≤–µ—Ä—Ö–Ω—è—è" if week_type == "upper" else "–Ω–∏–∂–Ω—è—è"
        if schedule_type == "today":
            day_of_week = datetime.now().weekday()
            days_en = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
            days_ru = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
            day_name = days_en[day_of_week]
            day_name_ru = days_ru[day_of_week]
            schedule_text = read_schedule_file(group_number, week_type, day_name)
            if schedule_text:
                message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name_ru}\nüë• {group_display}, {week_display} –Ω–µ–¥–µ–ª—è\n\n{schedule_text}"
                await callback.message.answer(message)
            else:
                await callback.message.answer(f"–ù–∞ {day_name_ru} ({week_display} –Ω–µ–¥–µ–ª—è) –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")
        else:
            week_schedule = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\nüë• {group_display}, {week_display} –Ω–µ–¥–µ–ª—è\n\n"
            days = [
                ('monday', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'),
                ('tuesday', '–í—Ç–æ—Ä–Ω–∏–∫'),
                ('wednesday', '–°—Ä–µ–¥–∞'),
                ('thursday', '–ß–µ—Ç–≤–µ—Ä–≥'),
                ('friday', '–ü—è—Ç–Ω–∏—Ü–∞'),
                ('saturday', '–°—É–±–±–æ—Ç–∞'),
                ('sunday', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
            ]
            has_content = False
            for day_en, day_ru in days:
                day_schedule = read_schedule_file(group_number, week_type, day_en)
                if day_schedule:
                    week_schedule += f"üìå{day_ru}:\n\n{day_schedule}\n\n\n"
                    has_content = True
            if has_content:
                await callback.message.answer(week_schedule)
            else:
                await callback.message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {week_display} –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def send_daily_schedule():
    while True:
        try:
            now = datetime.now()
            users = get_mailing_users()
            current_week = get_current_week()
            for user_id, mailing_time_str, group_number in users:
                try:
                    mailing_time = datetime.strptime(mailing_time_str, '%H:%M').time()
                    current_time = now.time()
                    if current_time.hour == mailing_time.hour and current_time.minute == mailing_time.minute:
                        day_of_week = datetime.now().weekday()
                        days_en = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
                        days_ru = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥—É', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü—É', '—Å—É–±–±–æ—Ç—É', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
                        day_name = days_en[day_of_week]
                        day_name_ru = days_ru[day_of_week]
                        schedule_text = read_schedule_file(group_number, current_week, day_name)
                        if schedule_text:
                            week_display = "–≤–µ—Ä—Ö–Ω—è—è" if current_week == "upper" else "–Ω–∏–∂–Ω—è—è"
                            message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name_ru}\nüë• {group_number}, {week_display} –Ω–µ–¥–µ–ª—è\n\n{schedule_text}"
                            await bot.send_message(user_id, message)
                        else:
                            if day_of_week >= 5:
                                week_display = "–≤–µ—Ä—Ö–Ω—è—è" if current_week == "upper" else "–Ω–∏–∂–Ω—è—è"
                                await bot.send_message(user_id, f"üìÖ –ù–∞ {day_name_ru} ({week_display} –Ω–µ–¥–µ–ª—è) –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")
                except Exception:
                    continue
            await asyncio.sleep(60)
        except Exception:
            await asyncio.sleep(60)


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if is_user_registered(user_id):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_main_keyboard())
    else:
        await state.set_state(RegistrationStates.waiting_for_name)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")


@router.message(F.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def my_profile(message: Message):
    user_data = get_user_data(message.from_user.id)
    if user_data:
        profile_text = get_profile_text(user_data)
        await message.answer(profile_text, reply_markup=get_profile_inline_keyboard(user_data))
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_keyboard())


@router.message(F.text == "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def main_info(message: Message):
    info_text = read_text_file('storage/data/information.txt')
    await message.answer(info_text, reply_markup=get_addresses_keyboard())


@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: Message):
    await message.answer("üìû –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:", reply_markup=get_contacts_inline_keyboard())


@router.message(F.text == "–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")
async def subjects(message: Message):
    await message.answer("üìö –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
                         reply_markup=get_subjects_inline_keyboard())


@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def schedule_menu(message: Message):
    user_data = get_user_data(message.from_user.id)
    if user_data:
        await message.answer("üìÖ –ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                             reply_markup=get_schedule_inline_keyboard(user_data))
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name_parts = message.text.split()
    if len(name_parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        return
    await state.update_data(last_name=name_parts[0], first_name=' '.join(name_parts[1:]))
    await state.set_state(RegistrationStates.waiting_for_group)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", reply_markup=get_group_selection_registration_keyboard())


@router.callback_query(F.data.endswith("_reg"), RegistrationStates.waiting_for_group)
async def process_group_callback(callback: types.CallbackQuery, state: FSMContext):
    group_mapping = {
        "group_3_reg": "3 –≥—Ä—É–ø–ø–∞",
        "group_4_reg": "4 –≥—Ä—É–ø–ø–∞",
        "group_guest_reg": "–ì–æ—Å—Ç—å"
    }
    group = group_mapping.get(callback.data)
    if not group:
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return
    await state.update_data(group=group)
    if group == "–ì–æ—Å—Ç—å":
        data = await state.get_data()
        register_user(
            user_id=callback.from_user.id,
            last_name=data['last_name'],
            first_name=data['first_name'],
            group_number=data['group'],
            email="–ù–µ —É–∫–∞–∑–∞–Ω"
        )
        await callback.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                                      reply_markup=get_main_keyboard())
        await state.clear()
    else:
        await state.set_state(RegistrationStates.waiting_for_email)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É:")
    await callback.answer()


@router.message(RegistrationStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    email = message.text
    if '@' not in email or '.' not in email:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:")
        return
    data = await state.get_data()
    register_user(
        user_id=message.from_user.id,
        last_name=data['last_name'],
        first_name=data['first_name'],
        group_number=data['group'],
        email=email
    )
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                         reply_markup=get_main_keyboard())
    await state.clear()


@router.callback_query(F.data == "edit_name")
async def edit_name_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EditProfileStates.waiting_for_new_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
    await callback.answer()


@router.callback_query(F.data == "edit_group")
async def edit_group_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EditProfileStates.waiting_for_new_group)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:", reply_markup=get_group_selection_registration_keyboard())
    await callback.answer()


@router.callback_query(F.data == "edit_email")
async def edit_email_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(EditProfileStates.waiting_for_new_email)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
    await callback.answer()


@router.message(EditProfileStates.waiting_for_new_name)
async def process_new_name(message: Message, state: FSMContext):
    name_parts = message.text.split()
    if len(name_parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        return
    user_data = get_user_data(message.from_user.id)
    update_user_data(
        user_id=message.from_user.id,
        last_name=name_parts[0],
        first_name=' '.join(name_parts[1:]),
        group_number=user_data[3],
        email=user_data[4]
    )
    await message.answer("‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    await state.clear()


@router.callback_query(F.data.endswith("_reg"), EditProfileStates.waiting_for_new_group)
async def process_new_group_callback(callback: types.CallbackQuery, state: FSMContext):
    group_mapping = {
        "group_3_reg": "3 –≥—Ä—É–ø–ø–∞",
        "group_4_reg": "4 –≥—Ä—É–ø–ø–∞",
        "group_guest_reg": "–ì–æ—Å—Ç—å"
    }
    group = group_mapping.get(callback.data)
    if not group:
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return
    user_data = get_user_data(callback.from_user.id)
    if group == "–ì–æ—Å—Ç—å" and user_data[3] != "–ì–æ—Å—Ç—å":
        disable_mailing(callback.from_user.id)
        update_user_data(
            user_id=callback.from_user.id,
            last_name=user_data[1],
            first_name=user_data[2],
            group_number=group,
            email="–ù–µ —É–∫–∞–∑–∞–Ω"
        )
        await callback.message.answer("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞! –†–∞—Å—Å—ã–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞.")
        await state.clear()
    elif group != "–ì–æ—Å—Ç—å" and user_data[3] == "–ì–æ—Å—Ç—å":
        await state.update_data(new_group=group)
        await state.set_state(EditProfileStates.waiting_for_new_email)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É:")
    elif group != "–ì–æ—Å—Ç—å" and user_data[3] != "–ì–æ—Å—Ç—å":
        update_user_data(
            user_id=callback.from_user.id,
            last_name=user_data[1],
            first_name=user_data[2],
            group_number=group,
            email=user_data[4]
        )
        await callback.message.answer("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
        await state.clear()
    else:
        update_user_data(
            user_id=callback.from_user.id,
            last_name=user_data[1],
            first_name=user_data[2],
            group_number=group,
            email=user_data[4]
        )
        await callback.message.answer("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
        await state.clear()
    await callback.answer()


@router.message(EditProfileStates.waiting_for_new_email)
async def process_new_email(message: Message, state: FSMContext):
    email = message.text
    if '@' not in email or '.' not in email:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:")
        return
    user_data = get_user_data(message.from_user.id)
    data = await state.get_data()
    new_group = data.get('new_group')
    if new_group:
        update_user_data(
            user_id=message.from_user.id,
            last_name=user_data[1],
            first_name=user_data[2],
            group_number=new_group,
            email=email
        )
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await state.clear()
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()


@router.callback_query(F.data == "schedule_today")
async def schedule_today_callback(callback: types.CallbackQuery):
    user_data = get_user_data(callback.from_user.id)
    if not user_data:
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if user_data[3] == "–ì–æ—Å—Ç—å":
        await callback.message.answer(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
            reply_markup=get_group_selection_keyboard("today")
        )
    else:
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
            reply_markup=get_week_selection_keyboard("today")
        )
    await callback.answer()


@router.callback_query(F.data == "schedule_week")
async def schedule_week_callback(callback: types.CallbackQuery):
    user_data = get_user_data(callback.from_user.id)
    if not user_data:
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if user_data[3] == "–ì–æ—Å—Ç—å":
        await callback.message.answer(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:",
            reply_markup=get_group_selection_keyboard("week")
        )
    else:
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:",
            reply_markup=get_week_selection_keyboard("week")
        )
    await callback.answer()


@router.callback_query(F.data == "today_upper")
async def handle_today_upper(callback: types.CallbackQuery):
    user_data = get_user_data(callback.from_user.id)
    if user_data:
        await send_schedule(callback, user_data[3], user_data[3], "upper", "today")
    else:
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()


@router.callback_query(F.data == "today_lower")
async def handle_today_lower(callback: types.CallbackQuery):
    user_data = get_user_data(callback.from_user.id)
    if user_data:
        await send_schedule(callback, user_data[3], user_data[3], "lower", "today")
    else:
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()


@router.callback_query(F.data == "week_upper")
async def handle_week_upper(callback: types.CallbackQuery):
    user_data = get_user_data(callback.from_user.id)
    if user_data:
        await send_schedule(callback, user_data[3], user_data[3], "upper", "week")
    else:
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()


@router.callback_query(F.data == "week_lower")
async def handle_week_lower(callback: types.CallbackQuery):
    user_data = get_user_data(callback.from_user.id)
    if user_data:
        await send_schedule(callback, user_data[3], user_data[3], "lower", "week")
    else:
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()


@router.callback_query(F.data == "guest_today_3")
async def handle_guest_today_3(callback: types.CallbackQuery):
    await callback.message.answer(
        "üë• –ì—Ä—É–ø–ø–∞: 3 –≥—Ä—É–ø–ø–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
        reply_markup=get_week_selection_keyboard("today", "3")
    )
    await callback.answer()


@router.callback_query(F.data == "guest_today_4")
async def handle_guest_today_4(callback: types.CallbackQuery):
    await callback.message.answer(
        "üë• –ì—Ä—É–ø–ø–∞: 4 –≥—Ä—É–ø–ø–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
        reply_markup=get_week_selection_keyboard("today", "4")
    )
    await callback.answer()


@router.callback_query(F.data == "guest_week_3")
async def handle_guest_week_3(callback: types.CallbackQuery):
    await callback.message.answer(
        "üë• –ì—Ä—É–ø–ø–∞: 3 –≥—Ä—É–ø–ø–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:",
        reply_markup=get_week_selection_keyboard("week", "3")
    )
    await callback.answer()


@router.callback_query(F.data == "guest_week_4")
async def handle_guest_week_4(callback: types.CallbackQuery):
    await callback.message.answer(
        "üë• –ì—Ä—É–ø–ø–∞: 4 –≥—Ä—É–ø–ø–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:",
        reply_markup=get_week_selection_keyboard("week", "4")
    )
    await callback.answer()


@router.callback_query(F.data.startswith("guest_today_") & (F.data.endswith("_upper") | F.data.endswith("_lower")))
async def handle_guest_today_week(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    group_number = parts[2]
    week_type = parts[3]
    group_display = f"{group_number} –≥—Ä—É–ø–ø–∞ (–≥–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø)"
    await send_schedule(callback, group_display, f"{group_number} –≥—Ä—É–ø–ø–∞", week_type, "today")
    await callback.answer()


@router.callback_query(F.data.startswith("guest_week_") & (F.data.endswith("_upper") | F.data.endswith("_lower")))
async def handle_guest_week_week(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    group_number = parts[2]
    week_type = parts[3]
    group_display = f"{group_number} –≥—Ä—É–ø–ø–∞ (–≥–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø)"
    await send_schedule(callback, group_display, f"{group_number} –≥—Ä—É–ø–ø–∞", week_type, "week")
    await callback.answer()


@router.callback_query(F.data == "back_to_schedule")
async def back_to_schedule_callback(callback: types.CallbackQuery):
    user_data = get_user_data(callback.from_user.id)
    if user_data:
        await callback.message.answer("üìÖ –ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                                      reply_markup=get_schedule_inline_keyboard(user_data))
    else:
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()


@router.callback_query(F.data == "mailing_settings")
async def mailing_settings_callback(callback: types.CallbackQuery):
    user_data = get_user_data(callback.from_user.id)
    if user_data:
        status_text = get_mailing_status_text(user_data)
        await callback.message.answer(status_text, reply_markup=get_mailing_settings_keyboard(user_data))
    else:
        await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()


@router.callback_query(F.data == "enable_mailing")
async def enable_mailing_callback(callback: types.CallbackQuery):
    user_data = get_user_data(callback.from_user.id)
    if user_data and user_data[3] == "–ì–æ—Å—Ç—å":
        await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≥–æ—Å—Ç–µ–π!", show_alert=True)
        return
    enable_mailing(callback.from_user.id)
    user_data = get_user_data(callback.from_user.id)
    status_text = get_mailing_status_text(user_data)
    await callback.message.edit_text(status_text, reply_markup=get_mailing_settings_keyboard(user_data))
    await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!")


@router.callback_query(F.data == "disable_mailing")
async def disable_mailing_callback(callback: types.CallbackQuery):
    disable_mailing(callback.from_user.id)
    user_data = get_user_data(callback.from_user.id)
    status_text = get_mailing_status_text(user_data)
    await callback.message.edit_text(status_text, reply_markup=get_mailing_settings_keyboard(user_data))
    await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞!")


@router.callback_query(F.data == "change_mailing_time")
async def change_mailing_time_callback(callback: types.CallbackQuery, state: FSMContext):
    user_data = get_user_data(callback.from_user.id)
    if user_data and user_data[3] == "–ì–æ—Å—Ç—å":
        await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≥–æ—Å—Ç–µ–π!", show_alert=True)
        return
    await state.set_state(MailingTimeStates.waiting_for_time)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30 –∏–ª–∏ 14:00):\n\n"
        "‚ö†Ô∏è –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç 00:00 –¥–æ 23:59"
    )
    await callback.answer()


@router.message(MailingTimeStates.waiting_for_time)
async def process_mailing_time(message: Message, state: FSMContext):
    if is_valid_time(message.text):
        update_mailing_time(message.from_user.id, message.text)
        await message.answer("‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        await state.clear()
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30 –∏–ª–∏ 14:00)\n"
            "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 00:00 –¥–æ 23:59\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )


@router.callback_query(F.data.startswith("address_"))
async def handle_address_callback(callback: types.CallbackQuery):
    address_files = {
        "address_1": "storage/addresses/B. Pecherskaya, 25_12.txt",
        "address_2": "storage/addresses/Kostina, 2b.txt",
        "address_3": "storage/addresses/Lvovskaya, 1B.txt",
        "address_4": "storage/addresses/Rodionova, 136.txt",
        "address_5": "storage/addresses/Sormovskoe sh., 30.txt"
    }
    address_coordinates = {
        "address_1": {"latitude": 56.324875, "longitude": 44.022147},
        "address_2": {"latitude": 56.312615, "longitude": 43.992036},
        "address_3": {"latitude": 56.268496, "longitude": 43.877788},
        "address_4": {"latitude": 56.317467, "longitude": 44.067314},
        "address_5": {"latitude": 56.335001, "longitude": 43.888109}
    }
    address_file = address_files.get(callback.data)
    coordinates = address_coordinates.get(callback.data)
    if address_file and coordinates:
        address_info = read_text_file(address_file)
        await callback.message.answer_location(
            latitude=coordinates["latitude"],
            longitude=coordinates["longitude"]
        )
        await callback.message.answer(address_info)
    else:
        await callback.message.answer("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await callback.answer()


@router.callback_query(F.data == "groupmates")
async def groupmates_callback(callback: types.CallbackQuery):
    await callback.message.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–æ–≤:",
                                  reply_markup=get_groupmates_inline_keyboard())
    await callback.answer()


@router.callback_query(F.data == "teachers")
async def teachers_callback(callback: types.CallbackQuery):
    await callback.message.answer("üë®‚Äçüè´üë©‚Äçüè´ –í–∞—à–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
                                  reply_markup=get_teachers_inline_keyboard())
    await callback.answer()


@router.callback_query(F.data == "curators")
async def curators_callback(callback: types.CallbackQuery):
    await callback.message.answer("üåü –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä–∞—Ç–æ—Ä–∞—Ö –≥—Ä—É–ø–ø:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
                                  reply_markup=get_curators_groups_keyboard())
    await callback.answer()


@router.callback_query(F.data == "back_to_contacts")
async def back_to_contacts_callback(callback: types.CallbackQuery):
    await callback.message.answer("üìû –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:", reply_markup=get_contacts_inline_keyboard())
    await callback.answer()


@router.callback_query(F.data == "curators_group_3")
async def curators_group_3_callback(callback: types.CallbackQuery):
    curators_info = read_curators_file("3")
    await callback.message.answer(curators_info)
    await callback.answer()


@router.callback_query(F.data == "curators_group_4")
async def curators_group_4_callback(callback: types.CallbackQuery):
    curators_info = read_curators_file("4")
    await callback.message.answer(curators_info)
    await callback.answer()


@router.callback_query(F.data == "group_3")
async def group_3_callback(callback: types.CallbackQuery):
    users = get_group_users("3 –≥—Ä—É–ø–ø–∞")
    if users:
        contacts_text = "üë• –°–ø–∏—Å–æ–∫ –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–æ–≤ (3 –≥—Ä—É–ø–ø–∞):\n\n"
        for last_name, first_name, user_id, email in users:
            contacts_text += f"‚Ä¢ {last_name} {first_name}\nüìß {email}\n\n"
        await callback.message.answer(contacts_text)
    else:
        await callback.message.answer("–í 3 –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await callback.answer()


@router.callback_query(F.data == "group_4")
async def group_4_callback(callback: types.CallbackQuery):
    users = get_group_users("4 –≥—Ä—É–ø–ø–∞")
    if users:
        contacts_text = "üë• –°–ø–∏—Å–æ–∫ –æ–¥–Ω–æ–≥—Ä—É–ø–ø–Ω–∏–∫–æ–≤ (4 –≥—Ä—É–ø–ø–∞):\n\n"
        for last_name, first_name, user_id, email in users:
            contacts_text += f"‚Ä¢ {last_name} {first_name}\nüìß {email}\n\n"
        await callback.message.answer(contacts_text)
    else:
        await callback.message.answer("–í 4 –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await callback.answer()


@router.callback_query(F.data.in_([
    "english", "safe", "discrete", "history", "linear",
    "calculus", "digital", "statehood", "cpp", "software", "pe"
]))
async def handle_subject_callback(callback: types.CallbackQuery):
    subject_files = {
        "english": "storage/disciplines/English.txt",
        "safe": "storage/disciplines/Safe Living Basics.txt",
        "discrete": "storage/disciplines/Discrete Mathematics.txt",
        "history": "storage/disciplines/Russian History.txt",
        "linear": "storage/disciplines/Linear Algebra and Geometry.txt",
        "calculus": "storage/disciplines/Calculus.txt",
        "digital": "storage/disciplines/Scientific Practical Seminar Digital Literacy.txt",
        "statehood": "storage/disciplines/Foundations of Russian Statehood.txt",
        "cpp": "storage/disciplines/C C++ Programming.txt",
        "software": "storage/disciplines/Software Engineering.txt",
        "pe": "storage/disciplines/Physical Training.txt"
    }
    subject_file = subject_files.get(callback.data)
    if subject_file:
        subject_info = read_text_file(subject_file)
        teacher_keyboard = get_subject_teacher_keyboard(callback.data)
        await callback.message.answer(subject_info, reply_markup=teacher_keyboard)
    else:
        await callback.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await callback.answer()


@router.callback_query(F.data.in_([
    "gorodnova", "konstantinova", "kocherov", "marevichev",
    "peplin", "poloneckaya", "savina", "taleckiy", "ulitin", "chistyakova"
]))
async def handle_teacher_callback(callback: types.CallbackQuery):
    teacher_files = {
        "gorodnova": "storage/contacts/employees/Gorodnova A.A.txt",
        "konstantinova": "storage/contacts/employees/Konstantinova T.N.txt",
        "kocherov": "storage/contacts/employees/Kocherov S.N.txt",
        "marevichev": "storage/contacts/employees/Marevichev N.E.txt",
        "peplin": "storage/contacts/employees/Peplin F.S.txt",
        "poloneckaya": "storage/contacts/employees/Polone—Åkaya N.A.txt",
        "savina": "storage/contacts/employees/Savina O.N.txt",
        "taleckiy": "storage/contacts/employees/Taleckiy D.S.txt",
        "ulitin": "storage/contacts/employees/Ulitin B.I.txt",
        "chistyakova": "storage/contacts/employees/Chistyakova S.A.txt"
    }
    teacher_file = teacher_files.get(callback.data)
    if teacher_file:
        teacher_info = read_text_file(teacher_file)
        await callback.message.answer(teacher_info)
    else:
        await callback.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: types.CallbackQuery):
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
    await callback.answer()


async def main():
    create_database()
    asyncio.create_task(send_daily_schedule())
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())